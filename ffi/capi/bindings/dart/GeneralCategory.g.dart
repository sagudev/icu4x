// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `GeneralCategory`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html) for more information.
enum GeneralCategory {
  /// See the [Rust documentation for `Unassigned`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.Unassigned) for more information.
  // ignore: public_member_api_docs
  unassigned,
  /// See the [Rust documentation for `UppercaseLetter`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.UppercaseLetter) for more information.
  // ignore: public_member_api_docs
  uppercaseLetter,
  /// See the [Rust documentation for `LowercaseLetter`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.LowercaseLetter) for more information.
  // ignore: public_member_api_docs
  lowercaseLetter,
  /// See the [Rust documentation for `TitlecaseLetter`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.TitlecaseLetter) for more information.
  // ignore: public_member_api_docs
  titlecaseLetter,
  /// See the [Rust documentation for `ModifierLetter`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.ModifierLetter) for more information.
  // ignore: public_member_api_docs
  modifierLetter,
  /// See the [Rust documentation for `OtherLetter`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.OtherLetter) for more information.
  // ignore: public_member_api_docs
  otherLetter,
  /// See the [Rust documentation for `NonspacingMark`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.NonspacingMark) for more information.
  // ignore: public_member_api_docs
  nonspacingMark,
  /// See the [Rust documentation for `SpacingMark`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.SpacingMark) for more information.
  // ignore: public_member_api_docs
  spacingMark,
  /// See the [Rust documentation for `EnclosingMark`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.EnclosingMark) for more information.
  // ignore: public_member_api_docs
  enclosingMark,
  /// See the [Rust documentation for `DecimalNumber`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.DecimalNumber) for more information.
  // ignore: public_member_api_docs
  decimalNumber,
  /// See the [Rust documentation for `LetterNumber`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.LetterNumber) for more information.
  // ignore: public_member_api_docs
  letterNumber,
  /// See the [Rust documentation for `OtherNumber`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.OtherNumber) for more information.
  // ignore: public_member_api_docs
  otherNumber,
  /// See the [Rust documentation for `SpaceSeparator`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.SpaceSeparator) for more information.
  // ignore: public_member_api_docs
  spaceSeparator,
  /// See the [Rust documentation for `LineSeparator`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.LineSeparator) for more information.
  // ignore: public_member_api_docs
  lineSeparator,
  /// See the [Rust documentation for `ParagraphSeparator`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.ParagraphSeparator) for more information.
  // ignore: public_member_api_docs
  paragraphSeparator,
  /// See the [Rust documentation for `Control`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.Control) for more information.
  // ignore: public_member_api_docs
  control,
  /// See the [Rust documentation for `Format`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.Format) for more information.
  // ignore: public_member_api_docs
  format,
  /// See the [Rust documentation for `PrivateUse`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.PrivateUse) for more information.
  // ignore: public_member_api_docs
  privateUse,
  /// See the [Rust documentation for `Surrogate`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.Surrogate) for more information.
  // ignore: public_member_api_docs
  surrogate,
  /// See the [Rust documentation for `DashPunctuation`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.DashPunctuation) for more information.
  // ignore: public_member_api_docs
  dashPunctuation,
  /// See the [Rust documentation for `OpenPunctuation`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.OpenPunctuation) for more information.
  // ignore: public_member_api_docs
  openPunctuation,
  /// See the [Rust documentation for `ClosePunctuation`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.ClosePunctuation) for more information.
  // ignore: public_member_api_docs
  closePunctuation,
  /// See the [Rust documentation for `ConnectorPunctuation`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.ConnectorPunctuation) for more information.
  // ignore: public_member_api_docs
  connectorPunctuation,
  /// See the [Rust documentation for `InitialPunctuation`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.InitialPunctuation) for more information.
  // ignore: public_member_api_docs
  initialPunctuation,
  /// See the [Rust documentation for `FinalPunctuation`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.FinalPunctuation) for more information.
  // ignore: public_member_api_docs
  finalPunctuation,
  /// See the [Rust documentation for `OtherPunctuation`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.OtherPunctuation) for more information.
  // ignore: public_member_api_docs
  otherPunctuation,
  /// See the [Rust documentation for `MathSymbol`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.MathSymbol) for more information.
  // ignore: public_member_api_docs
  mathSymbol,
  /// See the [Rust documentation for `CurrencySymbol`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.CurrencySymbol) for more information.
  // ignore: public_member_api_docs
  currencySymbol,
  /// See the [Rust documentation for `ModifierSymbol`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.ModifierSymbol) for more information.
  // ignore: public_member_api_docs
  modifierSymbol,
  /// See the [Rust documentation for `OtherSymbol`](https://docs.rs/icu/2.1.1/icu/properties/props/enum.GeneralCategory.html#variant.OtherSymbol) for more information.
  // ignore: public_member_api_docs
  otherSymbol;

  int get _ffi {
    switch (this) {
      case unassigned:
        return 0;
      case uppercaseLetter:
        return 1;
      case lowercaseLetter:
        return 2;
      case titlecaseLetter:
        return 3;
      case modifierLetter:
        return 4;
      case otherLetter:
        return 5;
      case nonspacingMark:
        return 6;
      case spacingMark:
        return 8;
      case enclosingMark:
        return 7;
      case decimalNumber:
        return 9;
      case letterNumber:
        return 10;
      case otherNumber:
        return 11;
      case spaceSeparator:
        return 12;
      case lineSeparator:
        return 13;
      case paragraphSeparator:
        return 14;
      case control:
        return 15;
      case format:
        return 16;
      case privateUse:
        return 17;
      case surrogate:
        return 18;
      case dashPunctuation:
        return 19;
      case openPunctuation:
        return 20;
      case closePunctuation:
        return 21;
      case connectorPunctuation:
        return 22;
      case initialPunctuation:
        return 28;
      case finalPunctuation:
        return 29;
      case otherPunctuation:
        return 23;
      case mathSymbol:
        return 24;
      case currencySymbol:
        return 25;
      case modifierSymbol:
        return 26;
      case otherSymbol:
        return 27;
    }
  }

  /// See the [Rust documentation for `for_char`](https://docs.rs/icu/2.1.1/icu/properties/props/trait.EnumeratedProperty.html#tymethod.for_char) for more information.
  static GeneralCategory forChar(Rune ch) {
    final result = _icu4x_GeneralCategory_for_char_mv1(ch);
    return GeneralCategory.values.firstWhere((v) => v._ffi == result);
  }

  /// Convert to an integer using the ICU4C integer mappings for `General_Category`
  /// Get the "long" name of this property value (returns empty if property value is unknown)
  ///
  /// See the [Rust documentation for `get`](https://docs.rs/icu/2.1.1/icu/properties/struct.PropertyNamesLongBorrowed.html#method.get) for more information.
  String? longName() {
    final result = _icu4x_GeneralCategory_long_name_mv1(_ffi);
    if (!result.isOk) {
      return null;
    }
    return result.union.ok._toDart([], isStatic: true);
  }

  /// Get the "short" name of this property value (returns empty if property value is unknown)
  ///
  /// See the [Rust documentation for `get`](https://docs.rs/icu/2.1.1/icu/properties/struct.PropertyNamesShortBorrowed.html#method.get) for more information.
  String? shortName() {
    final result = _icu4x_GeneralCategory_short_name_mv1(_ffi);
    if (!result.isOk) {
      return null;
    }
    return result.union.ok._toDart([], isStatic: true);
  }

  /// Convert to an integer value usable with ICU4C and CodePointMapData
  int toIntegerValue() {
    final result = _icu4x_GeneralCategory_to_integer_value_mv1(_ffi);
    return result;
  }

  /// Produces a GeneralCategoryGroup mask that can represent a group of general categories
  ///
  /// See the [Rust documentation for `GeneralCategoryGroup`](https://docs.rs/icu/2.1.1/icu/properties/props/struct.GeneralCategoryGroup.html) for more information.
  GeneralCategoryGroup toGroup() {
    final result = _icu4x_GeneralCategory_to_group_mv1(_ffi);
    return GeneralCategoryGroup._fromFfi(result);
  }

  /// Convert from an integer using the ICU4C integer mappings for `General_Category`
  /// Convert from an integer value from ICU4C or CodePointMapData
  static GeneralCategory? fromIntegerValue(int other) {
    final result = _icu4x_GeneralCategory_from_integer_value_mv1(other);
    if (!result.isOk) {
      return null;
    }
    return GeneralCategory.values.firstWhere((v) => v._ffi == result.union.ok);
  }

}

@_DiplomatFfiUse('icu4x_GeneralCategory_for_char_mv1')
@ffi.Native<ffi.Int32 Function(ffi.Uint32)>(isLeaf: true, symbol: 'icu4x_GeneralCategory_for_char_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_GeneralCategory_for_char_mv1(Rune ch);

@_DiplomatFfiUse('icu4x_GeneralCategory_long_name_mv1')
@ffi.Native<_ResultSliceUtf8Void Function(ffi.Int32)>(isLeaf: true, symbol: 'icu4x_GeneralCategory_long_name_mv1')
// ignore: non_constant_identifier_names
external _ResultSliceUtf8Void _icu4x_GeneralCategory_long_name_mv1(int self);

@_DiplomatFfiUse('icu4x_GeneralCategory_short_name_mv1')
@ffi.Native<_ResultSliceUtf8Void Function(ffi.Int32)>(isLeaf: true, symbol: 'icu4x_GeneralCategory_short_name_mv1')
// ignore: non_constant_identifier_names
external _ResultSliceUtf8Void _icu4x_GeneralCategory_short_name_mv1(int self);

@_DiplomatFfiUse('icu4x_GeneralCategory_to_integer_value_mv1')
@ffi.Native<ffi.Uint8 Function(ffi.Int32)>(isLeaf: true, symbol: 'icu4x_GeneralCategory_to_integer_value_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_GeneralCategory_to_integer_value_mv1(int self);

@_DiplomatFfiUse('icu4x_GeneralCategory_to_group_mv1')
@ffi.Native<_GeneralCategoryGroupFfi Function(ffi.Int32)>(isLeaf: true, symbol: 'icu4x_GeneralCategory_to_group_mv1')
// ignore: non_constant_identifier_names
external _GeneralCategoryGroupFfi _icu4x_GeneralCategory_to_group_mv1(int self);

@_DiplomatFfiUse('icu4x_GeneralCategory_from_integer_value_mv1')
@ffi.Native<_ResultInt32Void Function(ffi.Uint8)>(isLeaf: true, symbol: 'icu4x_GeneralCategory_from_integer_value_mv1')
// ignore: non_constant_identifier_names
external _ResultInt32Void _icu4x_GeneralCategory_from_integer_value_mv1(int other);

// dart format on
